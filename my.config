// Nextflow config file: Graham Magor


// helper functions
def partition_switch(attempt) {(attempt == 1) ? '--partition=genomics --qos=genomics --time=0-4:00:00' : '--partition=comp --time=7-00:00:00'}
def time_mod(time, attempt) {(attempt == 1) ? time : (time + (attempt * (time / 2)))}
def memory_mod(memory, attempt) {(attempt == 1) ? memory : (memory + (attempt * (memory / 2)))}



profiles {
    local {
        executor {
            name = 'local'
            queueSize = 32
            pollInterval = '30 sec'
        }
        process {
            executor = 'local'
            stageInMode = 'symlink'
            errorStrategy = 'retry'
            maxRetries = 5
            cache = 'lenient'
            beforeScript = 'module load singularity/3.5.3'
        }
    }

    slurm {

        process.executor = 'slurm'
	    
      executor {
           name = 'slurm'
           queueSize = 200
           pollInterval = '120 sec'
        }

      process {    
          executor = 'slurm'
          stageInMode = 'symlink'
          errorStrategy = 'retry'
          maxRetries = 1
          cache = 'lenient'

          withLabel: star_align {
              cpus = 18
              memory = { memory_mod(32.GB, task.attempt) } 
              time = { time_mod(4.hour, task.attempt) } 
          }
        }
    }

    pbs {

        process.executor = 'pbs'

        executor {
            name = 'pbs'
            queueSize = 200
            pollInterval ='120 sec'
        }

        process {    
          executor = 'pbs'
          stageInMode = 'symlink'
          errorStrategy = 'retry'
          maxRetries = 1
          cache = 'lenient'

          withLabel: star_align {
              cpus = 18
              memory = { memory_mod(32.GB, task.attempt) } 
              time = { time_mod(4.hour, task.attempt) } 
          }

          withLabel: small {
              cpus = 1
              memory = { memory_mod(2.GB, task.attempt) } 
              time = { time_mod(1.hour, task.attempt) } 
          }
        }

    }
}